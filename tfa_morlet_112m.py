import numpy as np
import math
import time
import matplotlib.pyplot as plt
import scipy.signal
from skimage.transform import resize
from scipy.signal import convolve2d
from numba import jit
from scipy.signal import filtfilt
import cupy as cp
from cupyx.scipy.signal._wavelets import cwt
from cupyx.scipy.signal._wavelets import ricker
from cupyx.scipy.signal._wavelets import morlet2


def conv2(x, y, mode='same'):
    return convolve2d(x, y, mode=mode)


def filter_fir1(input_signal):
    #fir(80,0.15)75
    b = [-4.68815585762700e-19,-0.000302351879462390,-0.000581807229260730,-0.000789503323042863,-0.000863966610211821,-0.000741281142766761,-0.000377323781078488,0.000223491156074122,0.000983570836910923,0.00174409410083587,0.00228340629553407,0.00236465163351871,0.00180559666170298,0.000553852167570945,-0.00125563254780374,-0.00328409189339457,-0.00502952269678481,-0.00592657440864558,-0.00549070376924233,-0.00347527655231944,3.16450520389822e-18,0.00439131242642798,0.00877441185128429,0.0119989568852599,0.0129352486189397,0.0107680623420461,0.00527291501946932,-0.00299562950813098,-0.0126630041362103,-0.0216734804037843,-0.0276033090595939,-0.0281018071875287,-0.0213798111726321,-0.00664599771138175,0.0156063746597999,0.0435356784937437,0.0741424311645611,0.103693951831894,0.128313110767270,0.144624020401807,0.150331875397250,0.144624020401807,0.128313110767270,0.103693951831894,0.0741424311645611,0.0435356784937437,0.0156063746597999,-0.00664599771138175,-0.0213798111726321,-0.0281018071875287,-0.0276033090595939,-0.0216734804037843,-0.0126630041362103,-0.00299562950813098,0.00527291501946932,0.0107680623420461,0.0129352486189397,0.0119989568852599,0.00877441185128429,0.00439131242642798,3.16450520389822e-18,-0.00347527655231944,-0.00549070376924233,-0.00592657440864558,-0.00502952269678481,-0.00328409189339457,-0.00125563254780374,0.000553852167570945,0.00180559666170298,0.00236465163351871,0.00228340629553407,0.00174409410083587,0.000983570836910923,0.000223491156074122,-0.000377323781078488,-0.000741281142766761,-0.000863966610211821,-0.000789503323042863,-0.000581807229260730,-0.000302351879462390,-4.68815585762700e-19]
    y = filtfilt(b, 1, input_signal)
    return y

def MorletWavelet(fc):
    F_RATIO = 7
    Zalpha2 = 3.3
    sigma_f = fc / F_RATIO
    sigma_t = 1 / (2 * math.pi * sigma_f)
    A = 1 / math.sqrt(sigma_t * math.sqrt(math.pi))
    max_t = math.ceil(Zalpha2 * sigma_t)
    t = np.arange(-max_t, max_t + 1, 1)

    v1 = 1 / (-2 * sigma_t ** 2)
    v2 = 2j * math.pi * fc
    MW = A * np.exp(np.multiply(t, (np.multiply(t, v1) + v2) ))
    #MW = A * exp(t. * (t. * v1 + v2))
    return MW


def Cupy_cwt(td, fs, fmin, fmax, fstep):
    widths = cp.arange(fmin, fmax, fstep)
    cwtmatr  = cwt(td,morlet2,widths)
    return abs(cp.asnumpy(cwtmatr))



def tfa_morlet(td, fs, fmin, fmax, fstep):
    TFmap = []
    for fc in np.arange(fmin, fmax, fstep):
        MW = MorletWavelet(fc / fs)
        #cr = conv2(td, MW, 'same')

        if len(td) >= len(MW):
            npad = len(td) - len(MW)- 1
            u_padded = np.pad(MW, (npad // 2, npad - npad // 2), mode='constant')
            cr = np.convolve(td, u_padded,  'same')
        else:
            npad = len(MW) - len(td) - 1
            #u_padded = np.pad(MW, (npad // 2, npad - npad // 2), mode='constant')
            cr = np.convolve(td, MW, 'same')
            cr = cr[(npad // 2 + 1): (len(cr)- (npad - npad // 2))]


        TFmap.append(abs(cr))


    return TFmap


# B = np.array([590,591,591,588,587,585,587,587,588,588,588,589,589,588,587,586,584,584,585,582,583,586,586,584,585,583,584,582,582,581,581,578,581,581,582,583,581,581,582,581,582,581,580,580,580,581,582,581,580,580,579,578,578,576,577,576,576,577,577,574,575,575,574,572,572,570,574,573,577,577,577,577,578,577,578,579,581,580,580,580,579,579,578,580,582,584,586,588,590,593,594,599,600,603,605,604,605,606,606,607,607,607,607,608,609,610,611,613,615,615,619,620,619,623,629,636,647,660,674,692,712,735,759,781,800,813,822,831,836,841,839,828,798,761,715,671,634,606,590,582,582,584,588,590,591,591,594,594,597,598,597,597,595,594,593,593,597,596,595,593,592,591,590,589,590,590,588,589,592,590,590,591,590,590,589,587,588,586,587,586,587,587,586,585,586,583,582,580,580,582,581,581,581,580,581,578,578,578,577,577,577,577,577,576,576,573,574,573,572,572,572,571,569,568,567,567,567,568,569,568,567,567,564,563,561,563,562,562,562,563,563,563,562,564,563,562,562,564,563,566,569,569,571,571,573,571,572,574,575,575,577,579,581,581,582,584])
# s_rate = 250
# aa = B - B.mean()
# anorm = aa / aa.max()
# B = filter_fir1(anorm)

# aa = B - B.mean()
# anorm = aa / aa.max()
# DATA = -anorm
# sig = DATA

# t = time.time()
# fmin = 4
# fmax = 40
# img = np.array(tfa_morlet(sig, s_rate, fmin, fmax, 0.323))
# img = img[::-1,:]
# img_select = []
# for i in np.arange(0,256, 2.29):
#     img_select.append(int(round(i)))
# img = img[:,img_select]
# elapsed = time.time() - t
# print(elapsed)


